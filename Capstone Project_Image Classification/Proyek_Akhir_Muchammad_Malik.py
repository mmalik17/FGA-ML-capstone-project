# -*- coding: utf-8 -*-
"""Proyek_Ketiga.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKS8iBFFhMUgEHoqXiAlcFsNtFze5RS5

# PROYEK AKHIR
### Image Classification Model Deployment
Disusun Oleh: Muchammad Malik

Notes:
1. Dataset diambil dari Kaggle, pada tanggal 15 Juli 2021, dengan link: https://www.kaggle.com/ashishsaxena2209/animal-image-datasetdog-cat-and-panda
2. Untuk load dataset langsung dari runtime, input username dan password akun Kaggle
3. Akurasi terbesar pada percobaan terakhir adalah 0.9351 untuk data training dan 0.9267 untuk data validasi
"""

import os
os.environ['KAGGLE_USERNAME'] = #INPUT USERNAME
os.environ['KAGGLE_KEY'] = #INPUT PASSWORD

!kaggle datasets download -d ashishsaxena2209/animal-image-datasetdog-cat-and-panda

!unzip -q animal-image-datasetdog-cat-and-panda.zip -d .

os.listdir('/content/animals')

os.listdir('/content/animals/animals')

#Pengecekan jumlah file
print('cats:', len(os.listdir('/content/animals/animals/cats')))
print('dogs:',len(os.listdir('/content/animals/animals/dogs')))
print('panda:',len(os.listdir('/content/animals/animals/panda')))

base_dir= '/content/animals/animals/'

#pemisahan file menjadi training file dan validation file
!pip install split-folders tqdm #instalasi splitfolder

import splitfolders
base_dir = '/content/animals/animals/' 
splitfolders.ratio(base_dir, output=base_dir, ratio=(.8, .2))

os.listdir('/content/animals/animals/')

os.listdir('/content/animals/animals/train')
os.listdir('/content/animals/animals/val')

#Pengecekan Jumlah data training dan validation
train_panda = os.listdir('/content/animals/animals/train/panda')
train_cats = os.listdir('/content/animals/animals/train/cats')
train_dogs = os.listdir('/content/animals/animals/train/dogs')
val_panda = os.listdir('/content/animals/animals/val/panda')
val_cats = os.listdir('/content/animals/animals/val/cats')
val_dogs = os.listdir('/content/animals/animals/val/dogs')

print('Jumlah data training panda:', len(train_panda))
print('Jumlah data training cats:', len(train_cats))
print('Jumlah data training dogs:', len(train_dogs))
print('Jumlah data validation panda:', len(val_panda))
print('Jumlah data validation cats:', len(val_cats))
print('Jumlah data validation dogs:', len(val_dogs))

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

data_training_generator = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

data_testing_generator = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

#inisiasi variabel data training dan data testing
train_dir = os.path.join(base_dir, 'train')
test_dir = os.path.join(base_dir, 'val')

training_generator = data_training_generator.flow_from_directory(
        train_dir,  # direktori data training
        target_size=(100, 100),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=9,
        class_mode='categorical')

testing_generator = data_testing_generator.flow_from_directory(
        test_dir, # direktori data testing
        target_size=(100, 100), # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=9, 
        class_mode='categorical')

#direktori kelas
training_generator.class_indices

from tensorflow.keras.layers import Input
from tensorflow.keras.applications import ResNet152V2

#Arsitektur neural network menggunakan kombinasi antara conv maxploling layer dengan transfer learning model ResNet152V2
model = tf.keras.models.Sequential([
    ResNet152V2(weights="imagenet", include_top=False, input_tensor=Input(shape=(100, 100, 3))),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2), 
    #tf.keras.layers.Dropout(0.3), 
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(3, activation='softmax', name='class_output') 
      #fungsi aktivasi softmax cocok untuk data yang jumlah kelasnya lebih dari 2
])
model.layers[0].trainable = False

#ilustrasi model
model.summary()

#Pemilihan loss, optimizer, dan metrics
model.compile(loss='categorical_crossentropy', #data bersifat multiclass
              optimizer='adam',
              metrics=['accuracy'])

#menghentikan training ketika akurasi mencapai 92% dengan callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92 and logs.get('val_accuracy')>0.92):
      print("\nAkurasi Training dan validasi telah mencapai >92%!")
      self.model.stop_training = True

history = model.fit(
      training_generator, #menampilkan akurasi data training
      steps_per_epoch=50,  # jumlah steps tiap epoch data training
      epochs=100, #jumlah epoch keseluruhan
      validation_data=testing_generator, # menampilkan akurasi data testing
      validation_steps=50,  
      verbose=1, #verbose bernilai 1 untuk menambah animasi loading 
      callbacks = myCallback()
      )

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model

# Konversi model.
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

