# -*- coding: utf-8 -*-
"""Proyek_Kedua_Muchammad_Malik.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G1RJTM5Rpg_yomFfVJhlGpWVl75UjEdV

# PROYEK KEDUA
### MEMBUAT MODEL MACHINE LEARNING DENGAN DATA TIME SERIES
Disusun Oleh: Muchammad Malik

Notes:
1. Dataset diambil dari Kaggle, pada tanggal 13 Juli 2021, dengan link: https://www.kaggle.com/sumanthvrao/daily-climate-time-series-data
2. File dataset dalam bentuk csv, yang berjudul DailyDelhiClimateTrain.csv
3. File dataset sudah berada dalam folder zip yang sama
4. Range data berkisar antara 6,00 - 38,71. Persyaratan error 10% tercapai ketika mae = 3.271
5. error terkecil saat percobaan terakhir yaitu mae = 1,7968
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

data = pd.read_csv('DailyDelhiClimateTrain.csv')
data

data.describe()

"""Data yang dipilih: meantemp

Range data  = 38.71 - 6.00 = 32.71

mae 10% = 3.27
"""

data.isnull().sum()

dates = data['date'].values
climate = data['meantemp'].values

plt.figure(figsize=(25,10))
plt.plot(dates,climate)
plt.title('Daily Climate', fontsize=15)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(dates, climate, test_size = 0.2, random_state = 0 , shuffle=False) 
#pemisahan data time series tidak boleh dijadikan random, sehingga shuffle bernilai false

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

trainset = windowed_dataset(y_train, window_size=60, batch_size=100, shuffle_buffer=1000)
valset = windowed_dataset(y_test, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

sgd = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=sgd,
              metrics=["mae"])

#menghentikan training ketika akurasi mencapai 95% dengan callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):   
    if(logs.get('mae')<1.8):
      print("\nError dibawah 1,8")      
      self.model.stop_training = True
callbacks = myCallback()

num_epochs = 150
history = model.fit(trainset,                     
                    epochs=num_epochs, 
                    validation_data=(valset),                    
                    verbose = 1,
                    callbacks = [callbacks])

import matplotlib.pyplot as plt

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Mean absolute error')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

