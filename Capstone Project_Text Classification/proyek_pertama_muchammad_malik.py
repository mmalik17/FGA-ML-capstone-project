# -*- coding: utf-8 -*-
"""Proyek Pertama_Muchammad Malik.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/122XchCKuvGwr-V9Xu86_zcYjjU83evUr

# PROYEK PERTAMA
### MEMBUAT MODEL NLP DENGAN TENSORFLOW
Disusun Oleh: Muchammad Malik

Notes:
1. Dataset diambil dari Kaggle, pada tanggal 6 Juli 2021, dengan link: https://www.kaggle.com/venky73/spam-mails-dataset
2. File dataset dalam bentuk csv, yang berjudul spam_ham_dataset.csv
3. File dataset sudah berada dalam folder zip yang sama
4. Akurasi maksimal pada percobaan terakhir mencapai 0,9550
"""

import numpy as np
import pandas as pd

df = pd.read_csv('spam_ham_dataset.csv')
df

#identifikasi kolom
df.columns

#membagi atribut dan label
x = df['text'].values
y = df['label_num'].values

#pemisahan data training dan data validasi
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

#import library Tokenizer dan sequences
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

#Tokenisasi kata. num words dijadikan ribuan karena data berjumlah 5000 dan kalimatnya panjang.
tokenizer = Tokenizer(num_words=15000, oov_token='-')
tokenizer.fit_on_texts(x_train) 
tokenizer.fit_on_texts(x_test)
 
#mengubah teks menjadi sequences
sequences_train = tokenizer.texts_to_sequences(x_train)
sequences_test = tokenizer.texts_to_sequences(x_test)

#menyamakan panjang sequences
padding_train = pad_sequences(sequences_train) 
padding_test = pad_sequences(sequences_test)

import tensorflow as tf
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=15000, output_dim=16),
    tf.keras.layers.LSTM(16),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid'),
])

#loss berupa binary crossentropy karena label memiliki 2 kelas, yaitu spam dan ham
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

#menghentikan training ketika akurasi mencapai 95% dengan callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    a = 0
    if(logs.get('accuracy')>0.95):
      print("\nAkurasi telah mencapai >95%!")
      a = a+1
      self.model.stop_training = True
callbacks = myCallback()

num_epochs = 10
history = model.fit(padding_train, y_train, 
                    steps_per_epoch = 10,
                    epochs=num_epochs, 
                    validation_data=(padding_test, y_test), 
                    validation_steps = 5,
                    verbose=1,
                    callbacks = [callbacks])

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

